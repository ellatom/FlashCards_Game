{"ast":null,"code":"var _jsxFileName = \"/home/ellatom/Desktop/HTMLSENDBOX/JS/FlashCardRepo-master/src/Components/ManageCards.js\";\nimport React from 'react';\nimport api from './api';\nimport CardsList from './CardsList';\nimport FormCreateEdit from './FormCreateEdit';\n\nclass ManageCards extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: [],\n      loading: false,\n      currentCard: {}\n    };\n\n    this.getCardsDack = async () => {\n      let cards = await api.getCards();\n      this.setState({\n        cards: cards,\n        loading: false\n      });\n    };\n\n    this.setDelete = async (event, key) => {\n      debugger;\n      this.setState({\n        loading: true\n      }, async () => {\n        await api.deleteCard(key);\n        this.setState({\n          loading: false\n        });\n        await this.getCardsDack();\n      });\n    };\n\n    this.setEdit = async (event, key) => {\n      let card = this.state.cards.find(c => c.id === key);\n      this.setState({\n        currentCard: card\n      });\n    };\n\n    this.saveCard = async card => {\n      ///in case there are no more than 100 cards in each dack. this random wont be bug and easy to know created from gui by user and not mockapi.\n      if (card.id) {\n        await api.updateCard(card);\n      } else {\n        card.id = String(Math.floor(Math.random() * 200) + 100);\n        await api.createCard(card);\n      }\n\n      await this.getCardsDack();\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.updateCard = async card => {\n      await api.updateCard(card);\n    };\n\n    this.onAdd = async card => {\n      card.id = String(Math.floor(Math.random() * 200) + 100);\n      this.setState({\n        loading: true\n      }, async () => {\n        await api.createCard(card);\n        this.setState({\n          loading: false\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    this.getCardsDack();\n  } //API CRUD:GET\n\n\n  render() {\n    console.log(`ManageCards.render ${this.state.currentCard.id}`);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CardsList, {\n      cards: this.state.cards,\n      onDelete: this.setDelete,\n      onEdit: this.setEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(FormCreateEdit, {\n      card: this.state.currentCard,\n      saveCard: this.saveCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n;\nexport default ManageCards;","map":{"version":3,"sources":["/home/ellatom/Desktop/HTMLSENDBOX/JS/FlashCardRepo-master/src/Components/ManageCards.js"],"names":["React","api","CardsList","FormCreateEdit","ManageCards","Component","state","cards","loading","currentCard","getCardsDack","getCards","setState","setDelete","event","key","deleteCard","setEdit","card","find","c","id","saveCard","updateCard","String","Math","floor","random","createCard","onAdd","componentDidMount","render","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport api from './api';\nimport CardsList from './CardsList';\nimport FormCreateEdit from './FormCreateEdit';\n\nclass ManageCards extends React.Component {\n\n  state = { cards: [], loading: false, currentCard: {} };\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    this.getCardsDack();\n  }\n  //API CRUD:GET\n  getCardsDack = async () => {\n    let cards =\n      await api.getCards();\n\n    this.setState({\n      cards: cards,\n      loading: false\n    });\n  }\n  //API CRUD:DELETE\n  setDelete = async (event, key) => {\n    debugger;\n    this.setState(\n      { loading: true },\n\n      async () => {\n        await api.deleteCard(key);\n        this.setState({\n          loading: false\n        });\n        await this.getCardsDack();\n      });\n  }\n  /////API CRUD:EDIT CARD\n  setEdit = async (event, key) => {\n\n    let card =\n      this.state.cards.find(c => c.id === key);\n\n    this.setState({\n      currentCard: card\n    });\n  }\n\n  saveCard = async (card) => {///in case there are no more than 100 cards in each dack. this random wont be bug and easy to know created from gui by user and not mockapi.\n    \n    if (card.id) {\n      await api.updateCard(card);\n    }\n    else {\n      card.id =\n        String(Math.floor(Math.random() * 200) + 100);\n\n      await api.createCard(card);\n    }\n\n    await this.getCardsDack();\n    \n    this.setState({\n      loading: false\n    });\n\n  }\n  updateCard = async (card) => {\n    await api.updateCard(card);\n  }\n  ////API CRUD:CREATE NEW CARD\n  onAdd = async (card) => {\n\n    card.id =\n      String(Math.floor(Math.random() * 200) + 100);\n\n    this.setState({ loading: true },\n      async () => {\n        await api.createCard(card);\n\n        this.setState({\n          loading: false\n        });\n      });\n  }\n\n  render() {\n    console.log(`ManageCards.render ${this.state.currentCard.id}`);\n    return (\n      <div>\n        <CardsList\n          cards={this.state.cards}\n          onDelete={this.setDelete}\n          onEdit={this.setEdit}>\n        </CardsList>\n        <FormCreateEdit\n          card={this.state.currentCard}\n          saveCard={this.saveCard}>\n        </FormCreateEdit>\n      </div>\n    )\n  }\n};\n\nexport default ManageCards;\n"]},"metadata":{},"sourceType":"module"}